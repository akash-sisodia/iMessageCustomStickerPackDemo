//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Akash Singh Sisodia on 28/01/17.

import Messages

import UIKit

class MessagesViewController: MSMessagesAppViewController {
    // MARK: - Outlet
      var window: UIWindow?
    
    // MARK: - Variables
    var arrSticker :[MSSticker] = []
    
    // MARK: - iOS Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
   
        
        self.getStickers()
        self.createStickerBrowser()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
}

//MARK:- General Method
extension MessagesViewController {
    
    func getStickers(){
        /*for i in 1...3 {
         if let url = Bundle.main.url(forResource: "Sticker\(i)", withExtension: "png") {
         //if let url = Bundle.main.url(forResource: "$0", withExtension: "png") {
         do {
         //print ("Url: ")
         //print (url)
         let sticker = try MSSticker(contentsOfFileURL: url, localizedDescription: "")
         arrSticker.append(sticker)
         } catch {
         print(error.localizedDescription)
         }
         }
         }*/
        let url = Bundle.main.resourceURL!
        do {
            let urls = try FileManager.default.contentsOfDirectory(at: url, includingPropertiesForKeys:[], options: FileManager.DirectoryEnumerationOptions.skipsHiddenFiles)
            let pngFiles = urls.filter{ $0.pathExtension == "png" }
            if pngFiles.count > 1 {
                let fileCount = pngFiles.count - 1
                for i in 0...fileCount {
                    let fileName : String = pngFiles[i].relativeString
                    if fileName.range(of:"Sticker") != nil{
                        do {
                            let sticker = try MSSticker(contentsOfFileURL: pngFiles[i], localizedDescription: "")
                            arrSticker.append(sticker)
                        } catch {
                            print(error.localizedDescription)
                        }
                    }
                }
            }
            //print("LENGTH: ",pngFiles.count)
        } catch {
            print(error)
        }
    }
    func buttonAction(sender: UIButton!) {
        
        
        let alert = UIAlertController(title: "Alert", message: "Message", preferredStyle: UIAlertControllerStyle.alert)
        alert.addAction(UIAlertAction(title: "Click", style: UIAlertActionStyle.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
        print("Button tapped")
        
       
    }
    func infobuttonAction(sender: UIButton!) {
        
        
//        let alert = UIAlertController(title: "Alert", message: "Message", preferredStyle: UIAlertControllerStyle.alert)
//        alert.addAction(UIAlertAction(title: "Click", style: UIAlertActionStyle.default, handler: nil))
//        self.present(alert, animated: true, completion: nil)
//        print("Button tapped")
        
        
//        
//        let storyboard = UIStoryboard(name: "MainInterface", bundle: nil)
//        let myAlert = storyboard.instantiateViewController(withIdentifier: "storyboardID")
//        myAlert.modalPresentationStyle = UIModalPresentationStyle.overCurrentContext
//        myAlert.modalTransitionStyle = UIModalTransitionStyle.crossDissolve
//        self.present(myAlert, animated: true, completion: nil)
//
        var customView = UIView()
        customView.frame = CGRect.init(x: 0, y: 0, width: 100, height: 200)
        customView.backgroundColor = UIColor.black     //give color to the view
        customView.center = self.view.center
        
        
        
        
        
        
       self.view.window?.addSubview(customView)
        
        

        
        
        
        
        
        
    }

    
    
//    Sticker Pack
//    Delivered by
//    Nordic Electronics
//    
//    Visit our Website:
//    http://fungamesmobile.com (Link)
//    
//    Support: support@fungamesmobile.com (mail Link)
    func createStickerBrowser(){
        let stickerBrowserVC = MSStickerBrowserViewController(stickerSize: .regular)     //.small)
        
        addChildViewController(stickerBrowserVC)
        view.addSubview(stickerBrowserVC.view)
        
        stickerBrowserVC.stickerBrowserView.backgroundColor = UIColor.white   //.lightGray.withAlphaComponent(0.5)
        stickerBrowserVC.stickerBrowserView.dataSource = self
        
        let button = UIButton(frame: CGRect(x: 0, y: 5, width: 100, height: 20))
        button.backgroundColor = .green
        button.setTitle("Purchase", for: .normal)
        button.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
         view.addSubview(button)
        let button2 = UIButton(frame: CGRect(x: 105, y: 5, width: 100, height: 20))
        button2.backgroundColor = .green
        button2.setTitle("Restore", for: .normal)
        button2.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
        view.addSubview(button2)
        let button3 = UIButton(frame: CGRect(x: 210, y: 5, width: 20, height:20))
      
        button3.addTarget(self, action: #selector(infobuttonAction), for: .touchUpInside)
        button3.setImage(UIImage(named: "infoIcon.png"), for: UIControlState.normal)

        view.addSubview(button3)

       
        
        
        
        
        view.topAnchor.constraint(equalTo: stickerBrowserVC.view.topAnchor).isActive = true
        view.bottomAnchor.constraint(equalTo: stickerBrowserVC.view.bottomAnchor).isActive = true
        view.leftAnchor.constraint(equalTo: stickerBrowserVC.view.leftAnchor).isActive = true
        view.rightAnchor.constraint(equalTo: stickerBrowserVC.view.rightAnchor).isActive = true
        view.centerXAnchor.constraint(equalTo:stickerBrowserVC.view.centerXAnchor).isActive = true    }
}

//MARK:- MSStickerBrowserView DataSource

extension MessagesViewController : MSStickerBrowserViewDataSource{
    
    func numberOfStickers(in stickerBrowserView: MSStickerBrowserView) -> Int{
        return arrSticker.count
    }
    
    func stickerBrowserView(_ stickerBrowserView: MSStickerBrowserView, stickerAt index: Int) -> MSSticker{
        return arrSticker[index]
        
    }
}

 

 
